# Three-layer application (Orchestrator, Workers, Browser Services)

---
# RPA Orchestrator Deployment (Enhanced Control Plane)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rpa-orchestrator
  namespace: rpa-system
  labels:
    app: rpa-orchestrator
    tier: control-plane
    version: v2.0-enhanced
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: rpa-orchestrator
  template:
    metadata:
      labels:
        app: rpa-orchestrator
        tier: control-plane
        version: v2.0-enhanced
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: rpa-orchestrator-sa
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - rpa-orchestrator
                topologyKey: kubernetes.io/hostname
      
      initContainers:
        - name: wait-for-valkey
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              echo "Waiting for Valkey to be ready..."
              until nc -z valkey-service 6379; do
                echo "Valkey not ready, waiting..."
                sleep 2
              done
              echo "Valkey is ready!"
        
        - name: wait-for-database
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              echo "Database connectivity check..."
              # Add your database connectivity check here
              echo "Database check complete"
      
      containers:
        - name: orchestrator
          image: rpa-orchestrator:v2.0-enhanced
          imagePullPolicy: IfNotPresent
          
          ports:
            - name: api
              containerPort: 8620
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          
          env:
            # System Configuration
            - name: ORCHESTRATOR_HOST
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: orchestrator-host
            - name: ORCHESTRATOR_PORT
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: orchestrator-port
            
            # Worker Configuration
            - name: MAX_WORKERS
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: max-workers
            - name: WORKER_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: worker-timeout
            
            # Browser Service Configuration
            - name: BROWSER_SERVICE_COLD_START_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: browser-service-cold-start-timeout
            - name: BROWSER_SERVICE_WARM_POOL_SIZE
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: browser-service-warm-pool-size
            
            # Logging Configuration
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: log-level
            - name: LOG_FORMAT
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: log-format
            
            # Database Credentials
            - name: DB_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: connection-string
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: password
            
            # MetroFiber Credentials
            - name: METROFIBER_URL
              valueFrom:
                secretKeyRef:
                  name: metrofiber-credentials
                  key: url
            - name: METROFIBER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: metrofiber-credentials
                  key: email
            - name: METROFIBER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: metrofiber-credentials
                  key: password
            
            # Octotel Credentials
            - name: OCTOTEL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: octotel-credentials
                  key: username
            - name: OCTOTEL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: octotel-credentials
                  key: password
            - name: OCTOTEL_TOTP_SECRET
              valueFrom:
                secretKeyRef:
                  name: octotel-credentials
                  key: totp-secret
            
            # OpenServe Credentials
            - name: OPENSERVE_EMAIL
              valueFrom:
                secretKeyRef:
                  name: openserve-credentials
                  key: email
            - name: OPENSERVE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: openserve-credentials
                  key: password
            
            # Evotel Credentials
            - name: EVOTEL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: evotel-credentials
                  key: username
            - name: EVOTEL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: evotel-credentials
                  key: password
            
            # Valkey Configuration
            - name: VALKEY_HOST
              value: "valkey-service"
            - name: VALKEY_PORT
              value: "6379"
            - name: VALKEY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: valkey-credentials
                  key: password
            - name: VALKEY_SENTINEL_HOSTS
              value: "valkey-sentinel-service:26379"
            - name: VALKEY_MASTER_NAME
              value: "valkey-master"
            
            # JWT Configuration
            - name: JWT_SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: jwt-signing-key
                  key: signing-key
            
            # OpenShift Configuration
            - name: OPENSHIFT_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 2000m
              memory: 2Gi
          
          livenessProbe:
            httpGet:
              path: /health/live
              port: 8620
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8620
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          
          volumeMounts:
            - name: evidence-storage
              mountPath: /var/evidence
            - name: log-storage
              mountPath: /var/log/rpa
      
      volumes:
        - name: evidence-storage
          persistentVolumeClaim:
            claimName: evidence-storage
        - name: log-storage
          persistentVolumeClaim:
            claimName: log-storage
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

---
# RPA Worker Deployment (Business Logic Execution Layer)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rpa-worker
  namespace: rpa-system
  labels:
    app: rpa-worker
    tier: execution
    version: v2.0-enhanced
spec:
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: rpa-worker
  template:
    metadata:
      labels:
        app: rpa-worker
        tier: execution
        version: v2.0-enhanced
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9091"
        prometheus.io/path: "/metrics"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - rpa-worker
                topologyKey: kubernetes.io/hostname
      
      initContainers:
        - name: wait-for-orchestrator
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              echo "Waiting for Orchestrator to be ready..."
              until nc -z rpa-orchestrator-service 8620; do
                echo "Orchestrator not ready, waiting..."
                sleep 3
              done
              echo "Orchestrator is ready!"
      
      containers:
        - name: worker
          image: rpa-worker:v2.0-enhanced
          imagePullPolicy: IfNotPresent
          
          ports:
            - name: health
              containerPort: 8621
              protocol: TCP
            - name: metrics
              containerPort: 9091
              protocol: TCP
          
          env:
            # Orchestrator Configuration
            - name: ORCHESTRATOR_HOST
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: orchestrator-host
            - name: ORCHESTRATOR_PORT
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: orchestrator-port
            
            # Worker Configuration
            - name: WORKER_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: worker-timeout
            - name: CONCURRENT_JOBS_PER_WORKER
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: concurrent-jobs-per-worker
            
            # Browser Service Configuration
            - name: BROWSER_SESSION_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: browser-session-timeout
            
            # Logging Configuration
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: log-level
            - name: LOG_FORMAT
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: log-format
            
            # Retry Configuration
            - name: RETRY_ATTEMPTS
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: retry-attempts
            - name: RETRY_DELAY
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: retry-delay
            
            # Circuit Breaker Configuration
            - name: CIRCUIT_BREAKER_FAILURE_THRESHOLD
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: circuit-breaker-failure-threshold
            - name: CIRCUIT_BREAKER_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: circuit-breaker-timeout
            
            # JWT Configuration
            - name: JWT_SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: jwt-signing-key
                  key: signing-key
            
            # OpenShift Configuration
            - name: OPENSHIFT_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          
          resources:
            requests:
              cpu: 500m
              memory: 512Mi
            limits:
              cpu: 1500m
              memory: 1Gi
          
          livenessProbe:
            httpGet:
              path: /health/live
              port: 8621
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8621
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          
          volumeMounts:
            - name: evidence-storage
              mountPath: /var/evidence
            - name: log-storage
              mountPath: /var/log/rpa
      
      volumes:
        - name: evidence-storage
          persistentVolumeClaim:
            claimName: evidence-storage
        - name: log-storage
          persistentVolumeClaim:
            claimName: log-storage
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

---
# RPA Browser Service Deployment (Automation Execution Layer)
# NOTE: This deployment uses privileged security context for browser automation
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rpa-browser
  namespace: rpa-system
  labels:
    app: rpa-browser
    tier: automation
    version: v2.0-enhanced
spec:
  replicas: 0  # Managed dynamically by orchestrator (cold start pattern)
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 0
  selector:
    matchLabels:
      app: rpa-browser
  template:
    metadata:
      labels:
        app: rpa-browser
        tier: automation
        version: v2.0-enhanced
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9092"
        prometheus.io/path: "/metrics"
        container.apparmor.security.beta.kubernetes.io/browser: unconfined
    spec:
      # Browser services can be co-located for efficiency
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 50
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - rpa-browser
                topologyKey: kubernetes.io/hostname
      
      containers:
        - name: browser
          image: rpa-browser:v2.0-enhanced
          imagePullPolicy: IfNotPresent
          
          ports:
            - name: automation-api
              containerPort: 8080
              protocol: TCP
            - name: metrics
              containerPort: 9092
              protocol: TCP
          
          env:
            # Browser Configuration
            - name: BROWSER_TYPE
              value: "firefox"
            - name: HEADLESS_MODE
              value: "true"
            - name: BROWSER_TIMEOUT
              value: "30000"
            - name: SCREENSHOT_ON_ERROR
              value: "true"
            
            # Session Configuration
            - name: SESSION_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: browser-session-timeout
            - name: MAX_IDLE_TIME
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: browser-service-max-idle-time
            
            # Logging Configuration
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: log-level
            - name: LOG_FORMAT
              valueFrom:
                configMapKeyRef:
                  name: rpa-system-config
                  key: log-format
            
            # JWT Configuration for Service Authentication
            - name: JWT_SIGNING_KEY
              valueFrom:
                secretKeyRef:
                  name: jwt-signing-key
                  key: signing-key
            
            # OpenShift Configuration
            - name: OPENSHIFT_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          
          resources:
            requests:
              cpu: 1000m
              memory: 2Gi
            limits:
              cpu: 2000m
              memory: 4Gi
          
          livenessProbe:
            httpGet:
              path: /health/live
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          
          readinessProbe:
            httpGet:
              path: /health/ready
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: browser-cache
              mountPath: /tmp/browser-cache
            - name: evidence-storage
              mountPath: /var/evidence
          
          securityContext:
            # CRITICAL: Privileged container required for browser automation
            # This is the core workaround for OpenShift security constraints
            privileged: true
            runAsUser: 0  # Required for browser process creation
            capabilities:
              add:
                - SYS_ADMIN  # Required for sandboxing
                - NET_ADMIN  # Required for network interception
      
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 2Gi
        - name: browser-cache
          emptyDir:
            sizeLimit: 1Gi
        - name: evidence-storage
          persistentVolumeClaim:
            claimName: evidence-storage
      
      # NOTE: Standard security context cannot be applied to browser services
      # securityContext intentionally omitted to allow privileged containers
