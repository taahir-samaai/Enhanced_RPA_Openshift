# RPA Orchestrator - Makefile
# Quick commands for common tasks

.PHONY: help install test run clean build push deploy dev-up dev-down logs

# Colors
BLUE := \033[0;34m
GREEN := \033[0;32m
YELLOW := \033[1;33m
NC := \033[0m # No Color

# Variables
IMAGE_NAME ?= rpa-orchestrator
IMAGE_TAG ?= v2.0-enhanced
REGISTRY ?= your-registry.io
NAMESPACE ?= rpa-system
PYTHON ?= python3

help: ## Show this help message
	@echo "$(BLUE)RPA Orchestrator - Available Commands$(NC)"
	@echo ""
	@awk 'BEGIN {FS = ":.*##"; printf "Usage: make $(YELLOW)<target>$(NC)\n\n"} \
		/^[a-zA-Z_-]+:.*?##/ { printf "  $(BLUE)%-15s$(NC) %s\n", $$1, $$2 }' $(MAKEFILE_LIST)

##@ Development

install: ## Install Python dependencies
	@echo "$(BLUE)Installing dependencies...$(NC)"
	pip install -r requirements.txt
	@echo "$(GREEN)✓ Dependencies installed$(NC)"

install-dev: ## Install development dependencies
	@echo "$(BLUE)Installing development dependencies...$(NC)"
	pip install -r requirements.txt
	pip install pytest pytest-asyncio pytest-cov black flake8 mypy
	@echo "$(GREEN)✓ Development dependencies installed$(NC)"

format: ## Format code with black
	@echo "$(BLUE)Formatting code...$(NC)"
	black orchestrator.py services/ tests/
	@echo "$(GREEN)✓ Code formatted$(NC)"

lint: ## Lint code with flake8
	@echo "$(BLUE)Linting code...$(NC)"
	flake8 orchestrator.py services/ --max-line-length=100 --ignore=E501,W503
	@echo "$(GREEN)✓ Linting complete$(NC)"

type-check: ## Type check with mypy
	@echo "$(BLUE)Type checking...$(NC)"
	mypy orchestrator.py services/ --ignore-missing-imports
	@echo "$(GREEN)✓ Type checking complete$(NC)"

test: ## Run unit tests
	@echo "$(BLUE)Running tests...$(NC)"
	pytest tests/ -v
	@echo "$(GREEN)✓ Tests complete$(NC)"

test-cov: ## Run tests with coverage
	@echo "$(BLUE)Running tests with coverage...$(NC)"
	pytest --cov=. --cov-report=html --cov-report=term tests/
	@echo "$(GREEN)✓ Coverage report generated in htmlcov/$(NC)"

run: ## Run orchestrator locally
	@echo "$(BLUE)Starting orchestrator...$(NC)"
	$(PYTHON) orchestrator.py

dev-up: ## Start development environment with docker-compose
	@echo "$(BLUE)Starting development environment...$(NC)"
	docker-compose up -d
	@echo "$(GREEN)✓ Development environment started$(NC)"
	@echo "$(YELLOW)Orchestrator: http://localhost:8620$(NC)"
	@echo "$(YELLOW)Valkey UI: http://localhost:8081$(NC)"

dev-down: ## Stop development environment
	@echo "$(BLUE)Stopping development environment...$(NC)"
	docker-compose down
	@echo "$(GREEN)✓ Development environment stopped$(NC)"

dev-logs: ## View development logs
	docker-compose logs -f orchestrator

dev-restart: ## Restart orchestrator in dev environment
	@echo "$(BLUE)Restarting orchestrator...$(NC)"
	docker-compose restart orchestrator
	@echo "$(GREEN)✓ Orchestrator restarted$(NC)"

dev-clean: ## Clean development environment
	@echo "$(BLUE)Cleaning development environment...$(NC)"
	docker-compose down -v
	rm -rf data/ logs/ evidence/
	@echo "$(GREEN)✓ Development environment cleaned$(NC)"

##@ Building & Deployment

build: ## Build container image
	@echo "$(BLUE)Building image: $(IMAGE_NAME):$(IMAGE_TAG)$(NC)"
	docker build -t $(IMAGE_NAME):$(IMAGE_TAG) .
	docker tag $(IMAGE_NAME):$(IMAGE_TAG) $(REGISTRY)/$(IMAGE_NAME):$(IMAGE_TAG)
	@echo "$(GREEN)✓ Image built$(NC)"

push: ## Push image to registry
	@echo "$(BLUE)Pushing image to registry...$(NC)"
	docker push $(REGISTRY)/$(IMAGE_NAME):$(IMAGE_TAG)
	@echo "$(GREEN)✓ Image pushed$(NC)"

deploy: ## Deploy to OpenShift
	@echo "$(BLUE)Deploying to OpenShift namespace: $(NAMESPACE)$(NC)"
	./build-deploy.sh deploy -n $(NAMESPACE)
	@echo "$(GREEN)✓ Deployment complete$(NC)"

deploy-all: build push deploy ## Build, push, and deploy

update-image: ## Update image in OpenShift without rebuilding
	@echo "$(BLUE)Updating image in OpenShift...$(NC)"
	oc set image deployment/rpa-orchestrator \
		orchestrator=$(REGISTRY)/$(IMAGE_NAME):$(IMAGE_TAG) \
		-n $(NAMESPACE)
	oc rollout status deployment/rpa-orchestrator -n $(NAMESPACE)
	@echo "$(GREEN)✓ Image updated$(NC)"

rollback: ## Rollback deployment
	@echo "$(BLUE)Rolling back deployment...$(NC)"
	oc rollout undo deployment/rpa-orchestrator -n $(NAMESPACE)
	@echo "$(GREEN)✓ Rollback complete$(NC)"

##@ OpenShift Operations

oc-status: ## Show OpenShift deployment status
	@echo "$(BLUE)Orchestrator Status:$(NC)"
	oc get pods -l app=rpa-orchestrator -n $(NAMESPACE)
	oc get deployment rpa-orchestrator -n $(NAMESPACE)

oc-logs: ## View orchestrator logs in OpenShift
	@POD=$$(oc get pod -l app=rpa-orchestrator -n $(NAMESPACE) -o jsonpath='{.items[0].metadata.name}'); \
	echo "$(BLUE)Viewing logs for $$POD$(NC)"; \
	oc logs -f $$POD -n $(NAMESPACE)

oc-exec: ## Execute bash in orchestrator pod
	@POD=$$(oc get pod -l app=rpa-orchestrator -n $(NAMESPACE) -o jsonpath='{.items[0].metadata.name}'); \
	echo "$(BLUE)Executing bash in $$POD$(NC)"; \
	oc exec -it $$POD -n $(NAMESPACE) -- /bin/bash

oc-health: ## Check orchestrator health in OpenShift
	@POD=$$(oc get pod -l app=rpa-orchestrator -n $(NAMESPACE) -o jsonpath='{.items[0].metadata.name}'); \
	echo "$(BLUE)Health check for $$POD$(NC)"; \
	oc exec $$POD -n $(NAMESPACE) -- curl -s http://localhost:8620/health | python -m json.tool

oc-restart: ## Restart orchestrator pods
	@echo "$(BLUE)Restarting orchestrator...$(NC)"
	oc rollout restart deployment/rpa-orchestrator -n $(NAMESPACE)
	@echo "$(GREEN)✓ Restart initiated$(NC)"

oc-scale: ## Scale orchestrator (usage: make oc-scale REPLICAS=3)
	@REPLICAS=${REPLICAS}; \
	if [ -z "$$REPLICAS" ]; then \
		echo "$(YELLOW)Usage: make oc-scale REPLICAS=<number>$(NC)"; \
		exit 1; \
	fi; \
	echo "$(BLUE)Scaling orchestrator to $$REPLICAS replicas$(NC)"; \
	oc scale deployment/rpa-orchestrator --replicas=$$REPLICAS -n $(NAMESPACE)

##@ Maintenance

clean: ## Clean Python cache and build artifacts
	@echo "$(BLUE)Cleaning artifacts...$(NC)"
	find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete 2>/dev/null || true
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	rm -rf htmlcov/ .coverage
	@echo "$(GREEN)✓ Cleanup complete$(NC)"

clean-docker: ## Remove local Docker images
	@echo "$(BLUE)Removing Docker images...$(NC)"
	docker rmi $(IMAGE_NAME):$(IMAGE_TAG) 2>/dev/null || true
	docker rmi $(REGISTRY)/$(IMAGE_NAME):$(IMAGE_TAG) 2>/dev/null || true
	@echo "$(GREEN)✓ Images removed$(NC)"

backup-db: ## Backup database (for dev environment)
	@echo "$(BLUE)Backing up database...$(NC)"
	@if [ -f data/rpa_orchestrator.db ]; then \
		cp data/rpa_orchestrator.db data/rpa_orchestrator.db.backup.$$(date +%Y%m%d_%H%M%S); \
		echo "$(GREEN)✓ Database backed up$(NC)"; \
	else \
		echo "$(YELLOW)No database found$(NC)"; \
	fi

restore-db: ## Restore latest database backup
	@echo "$(BLUE)Restoring database...$(NC)"
	@LATEST=$$(ls -t data/rpa_orchestrator.db.backup.* 2>/dev/null | head -1); \
	if [ -n "$$LATEST" ]; then \
		cp $$LATEST data/rpa_orchestrator.db; \
		echo "$(GREEN)✓ Database restored from $$LATEST$(NC)"; \
	else \
		echo "$(YELLOW)No backup found$(NC)"; \
	fi

##@ Utilities

env: ## Show current environment configuration
	@echo "$(BLUE)Environment Configuration:$(NC)"
	@echo "IMAGE_NAME: $(IMAGE_NAME)"
	@echo "IMAGE_TAG: $(IMAGE_TAG)"
	@echo "REGISTRY: $(REGISTRY)"
	@echo "NAMESPACE: $(NAMESPACE)"
	@echo "PYTHON: $(PYTHON)"

version: ## Show orchestrator version
	@echo "$(BLUE)RPA Orchestrator$(NC)"
	@echo "Version: 2.0.0-enhanced"
	@echo "Architecture: Three-layer with browser services"

check-config: ## Validate configuration
	@echo "$(BLUE)Checking configuration...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)⚠ .env file not found$(NC)"; \
		echo "Run: cp .env.example .env"; \
	else \
		echo "$(GREEN)✓ .env file exists$(NC)"; \
	fi
	@if [ ! -f requirements.txt ]; then \
		echo "$(YELLOW)⚠ requirements.txt not found$(NC)"; \
	else \
		echo "$(GREEN)✓ requirements.txt exists$(NC)"; \
	fi
	@if [ ! -f Dockerfile ]; then \
		echo "$(YELLOW)⚠ Dockerfile not found$(NC)"; \
	else \
		echo "$(GREEN)✓ Dockerfile exists$(NC)"; \
	fi

db-shell: ## Open database shell (for dev SQLite)
	@if [ -f data/rpa_orchestrator.db ]; then \
		sqlite3 data/rpa_orchestrator.db; \
	else \
		echo "$(YELLOW)Database not found at data/rpa_orchestrator.db$(NC)"; \
	fi

api-test: ## Quick API test
	@echo "$(BLUE)Testing orchestrator API...$(NC)"
	@curl -s http://localhost:8620/health | python -m json.tool || \
		echo "$(YELLOW)Orchestrator not responding at localhost:8620$(NC)"

generate-secret: ## Generate JWT secret key
	@echo "$(BLUE)Generated JWT Secret Key:$(NC)"
	@openssl rand -base64 32

.DEFAULT_GOAL := help
